<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [I:\Win\Desktop\hahahahahahahaha\final\ece353_base_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image I:\Win\Desktop\hahahahahahahaha\final\ece353_base_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri May 09 17:07:24 2014
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; masterApp &rArr; __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[21]">DisableInterrupts</a>
 <LI><a href="#[23]">EnableInterrupts</a>
 <LI><a href="#[29]">StartCritical</a>
 <LI><a href="#[2b]">EndCritical</a>
 <LI><a href="#[5b]">WaitForInterrupt</a>
 <LI><a href="#[5c]">getHeapBase</a>
 <LI><a href="#[5d]">getHeapSize</a>
 <LI><a href="#[5e]">getStackBase</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 110 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">SYSTICKIntHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">Timer0AHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UART0IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">UART2IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UART5IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[f]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[a]">fgetc</a> from uart.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[e]">fputc</a> from uart.o(.text) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[d]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[9]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[58]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[11]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[21]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[23]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeWatchdogTimer1
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeTimer0A
</UL>

<P><STRONG><a name="[29]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDisplayUpdate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceOn
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceUpdate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterDisplayUpdate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButtons
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDutyCycle
</UL>

<P><STRONG><a name="[2b]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDisplayUpdate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceOn
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceUpdate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterDisplayUpdate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButtons
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDutyCycle
</UL>

<P><STRONG><a name="[5b]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>getHeapBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>getHeapSize</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>getStackBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>initializeBoard</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = initializeBoard &rArr; InitializeUART &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeTimer0A
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSysTick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSPI0
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeGpioPins
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeADC
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeUART
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; masterApp &rArr; __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[15]"></a>initializeGpioPins</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, gpioinitialize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initializeGpioPins
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[16]"></a>InitializeUART</STRONG> (Thumb, 580 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InitializeUART &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[1f]"></a>uartRx</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uartRx
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogClear
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[24]"></a>uartTx</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameOverDec
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogClear
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[5]"></a>UART0IntHandler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UART2IntHandler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART5IntHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[a]"></a>fgetc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fgetc &rArr; fputc &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>cBufInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeUART
</UL>

<P><STRONG><a name="[25]"></a>cBufAddChar</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cBufAddChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[22]"></a>cBufGetChar</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, circular_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[20]"></a>cBufGetFreeCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, circular_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[17]"></a>initializeADC</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[2a]"></a>GetADCval</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDutyCycle
</UL>

<P><STRONG><a name="[28]"></a>getDutyCycle</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = getDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCval
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[4]"></a>SYSTICKIntHandler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>Timer0AHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>initializeSysTick</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[19]"></a>initializeTimer0A</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = initializeTimer0A
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[2c]"></a>initializeWatchdogTimer1</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = initializeWatchdogTimer1
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[2d]"></a>examineButtons</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, buttonpress.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = examineButtons
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[2e]"></a>MasterDisplayUpdate</STRONG> (Thumb, 618 bytes, Stack size 8 bytes, ledupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MasterDisplayUpdate &rArr; getLCDRow &rArr; getSquare &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[30]"></a>faceUpdate</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, ledupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = faceUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game_face
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[31]"></a>faceOn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ledupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = faceOn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game_face
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameOverDec
</UL>

<P><STRONG><a name="[48]"></a>faceOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ledupdate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game_face
</UL>

<P><STRONG><a name="[32]"></a>SlaveDisplayUpdate</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, ledupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SlaveDisplayUpdate &rArr; getLCDRow &rArr; getSquare &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow_ColorMix
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
</UL>

<P><STRONG><a name="[2f]"></a>getLCDRow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, led_chars.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getLCDRow &rArr; getSquare &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSquare
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimalToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDisplayUpdate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterDisplayUpdate
</UL>

<P><STRONG><a name="[33]"></a>getLCDRow_ColorMix</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, led_chars.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getLCDRow_ColorMix &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDisplayUpdate
</UL>

<P><STRONG><a name="[1a]"></a>initializeSPI0</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[3b]"></a>spiTx</STRONG> (Thumb, 310 bytes, Stack size 20 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
</UL>

<P><STRONG><a name="[3a]"></a>spi_eeprom_read_status</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>

<P><STRONG><a name="[3c]"></a>spi_eeprom_wait_write_in_progress</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_eeprom_wait_write_in_progress &rArr; spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
</UL>

<P><STRONG><a name="[3d]"></a>spi_eeprom_read_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_eeprom_read_byte &rArr; spi_eeprom_wait_write_in_progress &rArr; spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
</UL>

<P><STRONG><a name="[3e]"></a>spi_eeprom_write_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_eeprom_write_disable &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[3f]"></a>spi_eeprom_write_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_eeprom_write_enable &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[40]"></a>spi_eeprom_write_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_eeprom_write_byte &rArr; spi_eeprom_wait_write_in_progress &rArr; spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
</UL>

<P><STRONG><a name="[41]"></a>WatchDogClear</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = WatchDogClear &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[42]"></a>update_score_on_slave</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = update_score_on_slave &rArr; WatchDogClear &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogClear
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[43]"></a>spi</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = spi &rArr; update_score_on_slave &rArr; WatchDogClear &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game_face
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameOverDec
</UL>

<P><STRONG><a name="[46]"></a>gameOverDec</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = gameOverDec &rArr; spi &rArr; update_score_on_slave &rArr; WatchDogClear &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceOn
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[1b]"></a>detectMaster</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = detectMaster &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>start_game_face</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = start_game_face &rArr; spi &rArr; update_score_on_slave &rArr; WatchDogClear &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceOff
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceOn
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[1c]"></a>masterApp</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = masterApp &rArr; __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_game_face
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameOverDec
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogClear
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;faceUpdate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterDisplayUpdate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButtons
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeWatchdogTimer1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDutyCycle
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>slaveApp</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, apps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = slaveApp &rArr; SlaveDisplayUpdate &rArr; getLCDRow &rArr; getSquare &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_score_on_slave
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDisplayUpdate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButtons
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeWatchdogTimer1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDutyCycle
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>PLL_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeBoard
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSquare
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow_ColorMix
</UL>

<P><STRONG><a name="[38]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSquare
</UL>

<P><STRONG><a name="[5f]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
</UL>

<P><STRONG><a name="[49]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[51]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[61]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[62]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[12]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[63]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>__vfscanf_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[65]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>__vfscanf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[66]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[52]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[45]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[54]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[35]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimalToBcd
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[69]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[27]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>decimalToBcd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, led_chars.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decimalToBcd &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow
</UL>

<P><STRONG><a name="[37]"></a>getSpeed</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, led_chars.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSquare
</UL>

<P><STRONG><a name="[36]"></a>getSquare</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, led_chars.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getSquare &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLCDRow
</UL>

<P><STRONG><a name="[53]"></a>_printf_core</STRONG> (Thumb, 750 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[57]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL>
<P><STRONG><a name="[c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
