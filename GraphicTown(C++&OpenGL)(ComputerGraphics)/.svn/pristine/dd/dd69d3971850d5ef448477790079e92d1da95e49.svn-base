
#include <math.h>
#include <gl\glut.h>
#include <gl\gl.h>
#include <gl\glu.h>
#include <stdlib.h>
#include <stdio.h>

#include "maths.h"
#include "l3dBillboard.h"
#include "tga.h"
#include "fonts.h"

float angle=0.0,deltaAngle = 0.0,ratio;
float x=0.0f,y=1.75f,z=5.0f;
float lx=0.0f,ly=0.0f,lz=-1.0f;
GLint snowman_display_list;
int deltaMove = 0, bla=0,deltaUp=0;
	int debug=1,type = 0;
unsigned int texName[1];
int w,h;
char s[30];
float time=0,timebase=0;
int frame=0;
int font=(int)GLUT_BITMAP_8_BY_13;

void changeSize(int w1, int h1)
	{
	w=w1;
	h=h1;

	// Prevent a divide by zero, when window is too short
	// (you cant make a window of zero width).
	if(h == 0)
		h = 1;

	ratio = 1.0f * w / h;
	// Reset the coordinate system before modifying
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	w=w1;
	h=h1;
	// Set the viewport to be the entire window
    glViewport(0, 0, w, h);

	// Set the clipping volume
	gluPerspective(45,ratio,1,1000);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(x, y, z, 
		      x + lx,y + ly,z + lz,
			  0.0f,1.0f,0.0f);


	}


void drawSnowMan() {


/*	glBegin(GL_LINES);
		glVertex3f(0,0,0);
		glVertex3f(0,0,1.5);
	glEnd();
*/
	glColor3f(1.0f, 1.0f, 1.0f);

	glTranslatef(0,-1.75,0);
// Draw Body	
	glTranslatef(0.0f ,0.75f, 0.0f);
	glutSolidSphere(0.75f,20,20);


// Draw Head
	glTranslatef(0.0f, 1.0f, 0.0f);
	glutSolidSphere(0.25f,20,20);

// Draw Eyes
	glPushMatrix();
	glColor3f(0.0f,0.0f,0.0f);
	glTranslatef(0.05f, 0.10f, 0.18f);
	glutSolidSphere(0.05f,10,10);
	glTranslatef(-0.1f, 0.0f, 0.0f);
	glutSolidSphere(0.05f,10,10);
	glPopMatrix();

// Draw Nose
	glColor3f(1.0f, 0.5f , 0.5f);
	glRotatef(0.0f,1.0f, 0.0f, 0.0f);
	glutSolidCone(0.08f,0.5f,10,2);

}



GLuint createDL() {
	GLuint snowManDL;

	// Create the id for the list
	snowManDL = glGenLists(1);

	// start list
	glNewList(snowManDL,GL_COMPILE);

	// call the function that contains the rendering commands
		drawSnowMan();

	// endList
	glEndList();

	return(snowManDL);
}

void initScene() {

	tgaInfo *image;

	glEnable(GL_DEPTH_TEST);
	snowman_display_list = createDL();
	glGenTextures(1, texName);
	image = tgaLoad("tree.tga");
	glBindTexture(GL_TEXTURE_2D,texName[0]);
	glTexParameteri(GL_TEXTURE_2D,	GL_TEXTURE_WRAP_S,	GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D,	GL_TEXTURE_WRAP_T,	GL_REPEAT);

	glTexParameteri(GL_TEXTURE_2D,	GL_TEXTURE_MAG_FILTER	,GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D,	GL_TEXTURE_MIN_FILTER	,GL_LINEAR);
	
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image->width, image->height, 
				0, GL_RGBA, GL_UNSIGNED_BYTE, image->imageData);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, 0);

}



void orientMe(float ang) {


	lx = sin(ang);
	lz = -cos(ang);
}


void moveMeFlat(int i) {
	x = x + i*(lx)*0.1;
	z = z + i*(lz)*0.1;
}

void Lookup(int i) {
	ly +=0.01*i;
}





void renderScene(void) {


	float pos[3],right[3],up[3];

	if (deltaMove)
		moveMeFlat(deltaMove);
	if (deltaUp)
		Lookup(deltaUp);
	if (deltaAngle) {
		angle += deltaAngle;
		orientMe(angle);
	}
	float cam[3] = {x,y,z};

	glLoadIdentity();
	gluLookAt(x, y, z, 
		      x + lx,y + ly,z + lz,
			  0.0f,1.0f,0.0f);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
// Draw ground

	glColor3f(0.6f, 0.6f, 0.9f);
	glBegin(GL_QUADS);
		glVertex3f(-100.0f, 0.0f, -100.0f);
		glVertex3f(-100.0f, 0.0f,  100.0f);
		glVertex3f( 100.0f, 0.0f,  100.0f);
		glVertex3f( 100.0f, 0.0f, -100.0f);
	glEnd();

// Draw SnowMen

	glTranslatef(0,1.75,0);

	for(int i = -1; i < 1; i++)
		for(int j=-1; j < 1; j++) {
			glPushMatrix();
			glTranslatef(i*10.0,0,j * 10.0);

				glCallList(snowman_display_list);

			glPopMatrix();
		}
	glTranslatef(0,-1.75,0);
	glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glEnable(GL_ALPHA_TEST);
//	glTexEnvi(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_REPLACE);
    glAlphaFunc(GL_GREATER, 0);
	glBindTexture(GL_TEXTURE_2D,texName[0]);
	for( i = -10; i < 10; i++)
		for(int j = -10; j < 10; j++) {
			glPushMatrix();
			glTranslatef(5+i*10.0,0,5+j * 10.0);

			if (type == 3) {
				l3dBillboardGetRightVector(right);
				up[0] = 0;up[1] = 1;up[2]=0;
			}
			if (type == 2) {
				l3dBillboardGetUpRightVector(up,right);
			}


			pos[0] = 5+i*10.0; pos[1] = 0; pos[2] = 5+j * 10.0;
			if (type == 0)
				l3dBillboardCheatSphericalBegin();
			else if (type == 4)
				l3dBillboardSphericalBegin(cam,pos);
			else if (type == 5)
				l3dBillboardCylindricalBegin(cam,pos);
			else if (type == 1)
				l3dBillboardCheatCylindricalBegin();
			if (type == 2 || type == 3) {
				glBegin(GL_QUADS);
					glTexCoord2f(0,0);glVertex3f(-3.0f * right[0],             0.0f,                       -3.0 * right[2]);
					glTexCoord2f(1,0);glVertex3f( 3.0f * right[0],             0.0f,					    3.0 * right[2]);
					glTexCoord2f(1,1);glVertex3f( 3.0f * right[0] + 6 * up[0], 6.0f * up[1] + 3 * right[1], 3.0 * right[2] + 6 * up[2]);
					glTexCoord2f(0,1);glVertex3f(-3.0f * right[0] + 6 * up[0], 6.0f * up[1] - 3 * right[1],-3.0 * right[2] + 6 * up[2]);
				glEnd();
			}
			else {
				glBegin(GL_QUADS);
					glTexCoord2f(0,0);glVertex3f(-3.0f, 0.0f, 0.0f);
					glTexCoord2f(1,0);glVertex3f(3.0f, 0.0f, 0.0f);
					glTexCoord2f(1,1);glVertex3f(3.0f, 6.0f,  0.0f);
					glTexCoord2f(0,1);glVertex3f(-3.0f, 6.0f,  0.0f);
				glEnd();
			}
			if (type != 2 && type != 3 && type != 6) // restore matrix
			    glPopMatrix();
				//l3dBillboardEnd();
			glPopMatrix();

		}
	glBindTexture(GL_TEXTURE_2D,0);
	glDisable(GL_BLEND);
    glDisable(GL_ALPHA_TEST);

	frame++;
	time=glutGet(GLUT_ELAPSED_TIME);
	if (time - timebase > 1000) {
		sprintf(s,"FPS:%4.2f",frame*1000.0/(time-timebase));
		timebase = time;		
		frame = 0;
	}
	glColor3f(0.0f,1.0f,1.0f);
	setOrthographicProjection(w,h);
	glPushMatrix();
	glLoadIdentity();
	renderBitmapString(30,15,(void *)font,s); 
	glPopMatrix();
	resetPerspectiveProjection();

	
	glutSwapBuffers();
}



void pressKey(int key, int x1, int y1) {

	switch (key) {
		case GLUT_KEY_LEFT : deltaAngle = -0.01f;break;
		case GLUT_KEY_RIGHT : deltaAngle = 0.01f;break;
		case GLUT_KEY_UP : deltaMove = 1;break;
		case GLUT_KEY_DOWN : deltaMove = -1;break;
		case GLUT_KEY_F1 : deltaUp = 1;break;
		case GLUT_KEY_F2 : deltaUp = -1;break;
		case GLUT_KEY_F5: type++; if (type == 7) type = 0;
			switch(type) {
				case 0: printf("Cheating Spherical (matrix reset)\n"); break;
				case 1: printf("Cheating Cylindrical (matrix reset)\n"); break;
				case 2: printf("Cheating Spherical (manual transformation)\n"); break;
				case 3: printf("Cheating Cylindrical (manual transformation)\n"); break;
				case 4: printf("True Spherical\n"); break;
				case 5: printf("True Cylindrical\n"); break;
				case 6: printf("No billboarding\n"); break;
			}
	}
}

void releaseKey(int key, int x, int y) {

	switch (key) {
		case GLUT_KEY_LEFT : 
		case GLUT_KEY_RIGHT : deltaAngle = 0.0f;break;
		case GLUT_KEY_UP : 
		case GLUT_KEY_DOWN : deltaMove = 0;break;
		case GLUT_KEY_F1: 
		case GLUT_KEY_F2: deltaUp = 0;break;
	}
}

void processNormalKeys(unsigned char key, int x, int y) {

	if (key == 27) 
		exit(0);
}

int main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(640,360);
	glutCreateWindow("SnowMen from Lighthouse3D");

	initScene();

	glutIgnoreKeyRepeat(1);
	glutKeyboardFunc(processNormalKeys);
	glutSpecialFunc(pressKey);
	glutSpecialUpFunc(releaseKey);

	glutDisplayFunc(renderScene);
	glutIdleFunc(renderScene);

	glutReshapeFunc(changeSize);

	printf("Instructions:\n");
	printf("Use the arrow keys to navigate, F1 to look up, and F2 to look down\n");
	printf("Press F5 to switch between billboarding types\nCheating Spherical (matrix reset)\n");
	glutMainLoop();

	return(0);
}
